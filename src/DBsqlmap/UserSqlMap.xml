<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
                "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!--
    SqlMapConfig.xml 파일에서 namespace사용을 true로 변경하였기 때문에 이 XML의 네임스페이스를
    IbatisUser로 정의합니다.
-->
<sqlMap namespace="IbatisUser">
    <!--
        typeAlias태그는 type에 선언된 클래스 파일을 짧은이름으로
         치환해 주는 역할을 합니다.
        즉 bean.User란 java파일을 
        이 xml에서는 User란 이름으로 사용하겠다는 뜻입니다
    -->
    <typeAlias alias="User" type="bean.User"/> 
    
    <!-- 당연히 우리가 만든 클래스가 아니여도 별명을 지어줄 수 있습니다!!! -->
    <typeAlias alias="String" type="java.lang.String"/> 
    <!--
        실제 사용할 쿼리 문입니다.
        select 시에는 select,
        delete 시에는 delete
        update 시에는 update 태그를 사용하여 쿼리문을 생성합니다.
        이때 id는 필수 요소 입니다. 이 아이디를 통해 쿼리문을 접근할 수 있습니다.
        resultClass="Board" 는 아래 쿼리문을 통해 select된 데이터를 
        Board 클래스에 자동으로 저장하겠다는 뜻이고, 
        이 Board클래스는 상단의 typeAlias를 통해 alias시킨 것임으로 
        결국 IbatisBoardVO에 자동으로 저장될 것입니다.
         parameterClass 데이터를 입력받고 리턴할 클래스를 정함.
    -->
    <!--    SQL쿼리를 구분할 id값           결과값의 타입                 전달인자 타입(위에 <typeAlias에서 지어준 별명으로 타입명 설정 가능!!)  -->
    <select id="getUser" resultClass="User" parameterClass="String">
        SELECT
             *
        FROM
            user
        WHERE
            Id = #ID#
    </select>
    <!-- 인자는 #dto변수명# 형식으로 -->
    
    <select id="getUser_Nickname" resultClass="int" parameterClass="java.lang.String">
        SELECT
             count(*)
        FROM
            user
        WHERE
            Nickname = #Nickname#
    </select>
    
    <insert id="insertUser" parameterClass="User">
        INSERT
        INTO
            user (ID,Password,Name,Jumin,Nickname,Address,Member_pic,Phonenum,Email,Height,Weight)
        VALUES
            (#ID#,#Password#,#Name#,#Jumin#,#Nickname#,#Address#,#Member_pic#,#Phonenum#,#Email#,#Height#,#Weight#)
    </insert>
    
    <select id="getPw" resultClass="String" parameterClass="String">
    	SELECT
    		Password
    	FROM
    		user
    	WHERE
    		ID = #id#
    
    </select>
    
<update id="modifyUser" parameterClass="User">
       UPDATE 
          user
       SET
          Password=   #Password#,
          Nickname=   #Nickname#,
          Address=    #Address#,
          Email=      #Email#,
          Height=    #Height#,
          Weight=      #Weight#,
          Member_pic= #Member_pic# 
       WHERE
          ID=         #ID#   
       
    
    </update>
    
    <select id="getUser_Jumin" resultClass="int" parameterClass="java.lang.String">
        SELECT
             count(*)
        FROM
            user
        WHERE
            Jumin = #Jumin#
    </select>
    
    <delete id="deleteUser" parameterClass="String">
  
       DELETE FROM
          user
       WHERE 
          ID=         #ID#
    
    </delete>
    
    <!-- 유저의 포인트와 경험치를 올려준다. -->
    <update id="earnPoint" parameterClass="java.util.Map">
  
       UPDATE
          user
       SET
          Point = Point + #Point#, Exp = Exp + #Point#
       WHERE 
          ID= #ID#
    
    </update>
    
    <!-- 유저의 포인트를 깎는다. -->
    <update id="usePoint" parameterClass="java.util.Map">
  
       UPDATE
          user
       SET
          Point = Point - #Point#
       WHERE 
          ID= #ID#
    
    </update>
    
    <!-- 경험치에 따라 레벨을 조정한다. -->
    <update id="updateLevel" parameterClass="java.util.Map">
  
       UPDATE
          user
       SET
          Level = IF(Exp >= #level4#, 4, IF(Exp >= #level3#, 3, IF(Exp >= #level2#, 2, 1)))
       WHERE 
          ID= #ID#;
    
    </update>
    
    <!-- 모든 5레벨 유저를 4레벨로 강등한다. -->
    <update id="updateLevel5to4">
       UPDATE
          user
       SET
          Level = 4
       WHERE 
          level = 5
    </update>
    
    <!-- 상위 ~명만 5레벨로 저정한다. -->
    <update id="updateLevel4to5" parameterClass="java.util.Map">
    
       UPDATE
          user
       SET
          Level = 5
       WHERE 
          level = 4
       ORDER BY level DESC
       LIMIT #level5#
       
    </update>
</sqlMap>