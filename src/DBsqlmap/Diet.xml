<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
                "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!--
    SqlMapConfig.xml 파일에서 namespace사용을 true로 변경하였기 때문에 이 XML의 네임스페이스를
    IbatisUser로 정의합니다.
-->
<sqlMap namespace="IbatisDiet">
    <!--
        typeAlias태그는 type에 선언된 클래스 파일을 짧은이름으로
         치환해 주는 역할을 합니다.
        즉 bean.User란 java파일을 
        이 xml에서는 User란 이름으로 사용하겠다는 뜻입니다
    -->
    <typeAlias alias="food" type="bean.Food"/> 
    <typeAlias alias="diet" type="bean.User_diet"/> 
    <typeAlias alias="analysis" type="bean.Diet_analysis"/> 
    
    <!-- 당연히 우리가 만든 클래스가 아니여도 별명을 지어줄 수 있습니다!!! -->
    <typeAlias alias="String" type="java.lang.String"/>
    <typeAlias alias="int" type="java.lang.Integer"/>
    <!--
        실제 사용할 쿼리 문입니다.
        select 시에는 select,
        delete 시에는 delete
        update 시에는 update 태그를 사용하여 쿼리문을 생성합니다.
        이때 id는 필수 요소 입니다. 이 아이디를 통해 쿼리문을 접근할 수 있습니다.
        resultClass="Board" 는 아래 쿼리문을 통해 select된 데이터를 
        Board 클래스에 자동으로 저장하겠다는 뜻이고, 
        이 Board클래스는 상단의 typeAlias를 통해 alias시킨 것임으로 
        결국 IbatisBoardVO에 자동으로 저장될 것입니다.
         parameterClass 데이터를 입력받고 리턴할 클래스를 정함.
    -->
    <!--    SQL쿼리를 구분할 id값           결과값의 타입                 전달인자 타입(위에 <typeAlias에서 지어준 별명으로 타입명 설정 가능!!)  -->
    <!-- 음식명으로 데이터 조회 -->
    <select id="getFoodByName" resultClass="food" parameterClass="String">
        SELECT
             *
        FROM
            food
        WHERE
            name = #name#
    </select>
    <!-- 인자는 #dto변수명# 형식으로 -->
    
    <!-- 음식 검색 -->
    <select id="searchFoodList" resultClass="food" parameterClass="String">
        SELECT
             *
        FROM
            food
        WHERE
            name LIKE CONCAT(#name#,'%') or CAST(calorie AS CHAR(10)) = #calorie#

    </select>
    
    <!-- 식단 등록 -->
    <insert id="insertUserDiet" parameterClass="diet">
        INSERT
        INTO
            user_diet (id,category,menu,count)
        VALUES
            (#id#,#category#,#menu#,#count#)
    </insert>
    
    <!-- 식단 삭제 -->
    <delete id="deleteUserDiet" parameterClass="String">
        DELETE FROM
        	user_diet
        WHERE
            id = #id#
    </delete>
    
    <!-- 식단 조회 -->
    <select id="getUserDiet" resultClass="diet" parameterClass="String">
        SELECT
            *
        FROM
            user_diet
        WHERE
        	id = #id#
    </select>
    
    <!-- 식단의 칼로리, 영양소 정보 저장 -->
    <insert id="insertDietAnalysis" parameterClass="analysis">
        INSERT
        INTO
            diet_analysis (Id,category,calorie,tan,dan,ji,regdate)
        VALUES
            (#Id#,#category#,#calorie#,#tan#,#dan#,#ji#,now())
    </insert>
    
    <!-- 식단의 칼로리, 영양소 정보 갱신  -->
    <update id="updateDietAnalysis" parameterClass="analysis">
        UPDATE
        	diet_analysis
        SET
            calorie = #calorie#, tan = #tan#, dan = #dan#, ji = #ji#, regdate = now()
        WHERE
            Id = #Id# and category = #category#
    </update>
    
    <!-- 식단의 칼로리, 영양소 정보 조회 -->
    <select id="getDietAnalysis" resultClass="analysis" parameterClass="String">
        SELECT
            *
        FROM
            diet_analysis
        WHERE
        	Id = #Id#
    </select>
        
    <!-- 식단의 칼로리, 영양소 정보 조회2 JSON객체로 사용하기 위한 쿼리 -->
    <select id="calculateCalorieMyDiet" resultClass="java.util.HashMap" parameterClass="String">
        SELECT calorie,tan,dan,ji FROM diet_analysis WHERE Id = #Id#    	
    </select>   
     
    <!-- 현재 시간과 분석시간의 차이를 구함 -->
    <select id="getDietTime" resultClass="String" parameterClass="String">
	SELECT 
		CONCAT(
			TIMESTAMPDIFF(DAY, regdate, now()),':',
			TIMEDIFF(now(), regdate)
		)
	FROM 
		diet_analysis 
	WHERE 
		id = #id#
	GROUP BY now()
    </select>
</sqlMap>