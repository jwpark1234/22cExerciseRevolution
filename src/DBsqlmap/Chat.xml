<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
                "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!--
    SqlMapConfig.xml 파일에서 namespace사용을 true로 변경하였기 때문에 이 XML의 네임스페이스를
    IbatisUser로 정의합니다.
-->
<sqlMap namespace="IbatisChat">
    <!--
        typeAlias태그는 type에 선언된 클래스 파일을 짧은이름으로
         치환해 주는 역할을 합니다.
        즉 bean.User란 java파일을 
        이 xml에서는 User란 이름으로 사용하겠다는 뜻입니다
    -->
    <typeAlias alias="chat_room" type="bean.Chat_room"/> 
    <typeAlias alias="chat_request" type="bean.Chat_request"/> 
    
    <!-- 당연히 우리가 만든 클래스가 아니여도 별명을 지어줄 수 있습니다!!! -->
    <typeAlias alias="String" type="java.lang.String"/>
    <typeAlias alias="int" type="java.lang.Integer"/>
    <!--
        실제 사용할 쿼리 문입니다.
        select 시에는 select,
        delete 시에는 delete
        update 시에는 update 태그를 사용하여 쿼리문을 생성합니다.
        이때 id는 필수 요소 입니다. 이 아이디를 통해 쿼리문을 접근할 수 있습니다.
        resultClass="Board" 는 아래 쿼리문을 통해 select된 데이터를 
        Board 클래스에 자동으로 저장하겠다는 뜻이고, 
        이 Board클래스는 상단의 typeAlias를 통해 alias시킨 것임으로 
        결국 IbatisBoardVO에 자동으로 저장될 것입니다.
         parameterClass 데이터를 입력받고 리턴할 클래스를 정함.
    -->
    <!--    SQL쿼리를 구분할 id값           결과값의 타입                 전달인자 타입(위에 <typeAlias에서 지어준 별명으로 타입명 설정 가능!!)  -->
    
    <!-- 채팅방 조회1. 상담신청 중인 채팅방과 내가 상담자인 채팅방과 운영자와 나의 채팅방을 조회 -->
    <select id="readChatRequestList" resultClass="chat_request" parameterClass="String">
    	SELECT
    		*
    	FROM
    		chat_request
    	WHERE
    		req_id = #id# and resp_id = 'admin'
    
   		UNION ALL
   
        SELECT
             *
        FROM
            chat_request
        WHERE
        	status = 2 or (status = 1 and resp_id = #id#)
    </select>
    <!-- 인자는 #dto변수명# 형식으로 -->
    <!-- 채팅방 조회2. 내가 신청한 채팅방과 운영자와 나의 채팅방을 조회 -->
    <select id="readMyChatRequestList" resultClass="chat_request" parameterClass="String">      
        SELECT
             *
        FROM
            chat_request
        WHERE
        	(req_id = #id# and status != -1)
    </select>
    
    <select id="readAdminRequestList" resultClass="chat_request">  
        SELECT
             *
        FROM
            chat_request
        WHERE
        	resp_id = 'admin'
    </select>
    <!-- 회원과 운영자 간의 채팅방의 인덱스를 조회-->
    <select id="getAdminReqIdx" resultClass="int" parameterClass="String">  
        SELECT
             idx
        FROM
            chat_request
        WHERE
        	req_id = #id# and resp_id = 'admin'
    </select>
       
    <!-- 채팅방의 상태를 조회 -->
    <select id="getChatRequestStatus" resultClass="int" parameterClass="int">
        SELECT
             status
        FROM
            chat_request
        WHERE
        	idx = #idx#
    </select>
    
    <!-- 채팅방 생성 -->
    <insert id="insertChatRequest" parameterClass="chat_request">
        INSERT
        INTO
            chat_request (idx,req_id,req_level,resp_id,resp_level,subject,regdate,status)
        VALUES
            (null,#req_id#,#req_level#,#resp_id#,#resp_level#,#subject#,now(),#status#)
    </insert>
    
    <!-- 채팅방 정보 수정. 상담자, 상담자 레벨, 상담중으로 업데이트 -->
    <update id="updateChatRequestStatus" parameterClass="chat_request">
    	UPDATE
    		chat_request
    	SET
    		resp_id = #resp_id#, resp_level = #resp_level#, status = 1
    	WHERE
    		idx = #idx#
    </update>
    
    <!-- 채팅방 종료 -->
    <update id="quitChatRequest" parameterClass="int">
    	UPDATE
    		chat_request
    	SET
    		status = 0
    	WHERE
    		idx = #idx#
    </update>
    
    <!-- 채팅방 삭제 : 조회되지 않게 -->
    <update id="deleteChatRequest" parameterClass="int">
    	UPDATE
    		chat_request
    	SET
    		status = -1
    	WHERE
    		idx = #idx#
    </update>
 
 	<!-- 해당 채팅방에 상담내용을 전부 조회 -->
    <select id="readChatRoom" resultClass="chat_room" parameterClass="chat_room">
        SELECT
             *
        FROM
            chat_room
        WHERE
            req_idx = #req_idx# and ((from_id = #from_id# and to_id = #to_id#) or (from_id = #to_id# and to_id = #from_id#))
            
    </select>
    
    <!-- 읽은 메세지는 읽었다고 표시. 1(기본값) : 안읽음. 0 : 읽음. -->
    <update id="updateCheckMsg" parameterClass="chat_room">
    	UPDATE
    		chat_room
    	SET
    		checkMsg = 0
    	WHERE
    		req_idx = #req_idx# and ((from_id = #from_id# and to_id = #to_id#) or (from_id = #to_id# and to_id = #from_id#)) and checkMsg = 1
    </update>
    
    <!-- 메세지 전송!! -->
    <insert id="insertMessage" parameterClass="chat_room">
        INSERT
        INTO
            chat_room (idx,req_idx,from_id,from_level,to_id,message,regdate,checkMsg)
        VALUES
            (null,#req_idx#,#from_id#,#from_level#,#to_id#,#message#,now(),1)
    </insert>
        
    <!-- 채팅방목록에 맞춰 안읽은 메시지 갯수를 가져옴 -->
    <select id="readCheckMsg" resultClass="int" parameterClass="String"> 
		SELECT
			sum(IF(a.to_id = #id#,a.checkMsg,0))
		FROM
		    (SELECT
		        req.idx, room.to_id, room.checkMsg
			FROM
				chat_request req LEFT OUTER JOIN chat_room room
				ON req.idx = room.req_idx
			WHERE
				req.req_id = #id# or req.resp_id = #id#
			ORDER BY req.idx) a
		GROUP BY a.idx
    </select>
    
</sqlMap>