<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
                "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!--
    SqlMapConfig.xml 파일에서 namespace사용을 true로 변경하였기 때문에 이 XML의 네임스페이스를
    IbatisBoard로 정의합니다.
-->
<sqlMap namespace="IbatisUser">
    <!--
        typeAlias태그는 type에 선언된 클래스 파일을 짧은이름으로
         치환해 주는 역할을 합니다.
        즉 net....IbatisBoardVO란 java파일을 
        이 xml에서는 Product란 이름으로 사용하겠다는 뜻입니다
    -->
    <typeAlias alias="Excercise_plan_menu" type="bean.Excercise_plan_menu"/>
     <typeAlias alias="User_excercise_plan" type="bean.User_excercise_plan"/>
     <typeAlias alias="User_dayCalorie" type="bean.User_dayCalorie"/>
    <typeAlias alias="User_excercise_exercise_name_count" type="bean.User_excercise_exercise_name_count"/>
    <typeAlias alias="User_Exercise_plan_mean_calorie_count" type="bean.User_Exercise_plan_mean_calorie_count"/>
     <typeAlias alias="hash" type="java.util.HashMap"/> 
   
    
  
    <!--
        실제 사용할 쿼리 문입니다.
        select 시에는 select,
        delete 시에는 delete
        update 시에는 update 태그를 사용하여 쿼리문을 생성합니다.
        이때 id는 필수 요소 입니다. 이 아이디를 통해 쿼리문을 접근할 수 있습니다.
        resultClass="Board" 는 아래 쿼리문을 통해 select된 데이터를 
        Board 클래스에 자동으로 저장하겠다는 뜻이고, 
        이 Board클래스는 상단의 typeAlias를 통해 alias시킨 것임으로 
        결국 IbatisBoardVO에 자동으로 저장될 것입니다.
         parameterClass 데이터를 입력받고 리턴할 클래스를 정함.
    -->
    <select id="getExcercise_plan_menu" resultClass="Excercise_plan_menu" parameterClass="java.lang.Integer">
        SELECT
             *
        FROM
            excercise_plan_menu
        WHERE
            category_num = #category_num#
    </select>
    
    
    <select id="getExcercise_plan_menu_by_id" resultClass="Excercise_plan_menu" parameterClass="java.lang.Integer">
        SELECT
             *
        FROM
            excercise_plan_menu
        WHERE
            id = #id#
            
    </select>
    
    
    
    <update id="updateCount" parameterClass="java.lang.Integer">
    
    update excercise_plan_menu set
    
    count=count+1
    
    where id=#id#
    </update>
    
    <!--  유저 운동 계획에 데이터 넣을 것 -->
    
    
    <insert id="insertUser1_Excercise_Plan" parameterClass="bean.User_excercise_plan" >
    insert into user_excercise_plan
     values
    (null, #userId# , #excercise_name# , #calorie# , #height# , #weight# , #count# , #regdate#,#exercise_comment#,#my_category_img#,#exercise_cate_menu#)
    
    
    </insert>
    
    
    
     
    
    
    
    
    
    <!--  중복 날짜 제거 -->
    <!--  날짜에 따라  총칼로리  하루동안한 총 횟수도 나옴 그리고 그거 합쳐서 평균 낼것 -->
    <select id="user_excercise_plan_distinct_reg" resultClass="User_dayCalorie" parameterClass="java.lang.String">
    
select sum(count) as 'countday', sum(calorie*count*30) as 'dayCalorie',regdate from user_excercise_plan
where userId= #userId#
group by regdate
order by STR_TO_DATE(regdate, '%Y-%m-%d') asc
	 	
	 	
   </select> 
    
    
    
    
    <!--  유저가 가장많이 한 운동을 기준으로 5가지 추출  -->
    <select id="user_excercise_plan_excercise_name_count" resultClass="User_excercise_exercise_name_count" parameterClass="java.lang.String">
    
		select excercise_name , sum(count) as exercise_count from user_excercise_plan
		where userId=#userId#
		group by excercise_name
		order by STR_TO_DATE(regdate, '%Y-%m-%d') asc
    
    
    </select>
    
    
    <!--  유저가 총운동한 날의 평균 칼로리 ,평균 시간 -->
    <select id="user_excercise_plan_mean_calorie_count" resultClass="User_Exercise_plan_mean_calorie_count" parameterClass="java.lang.String">
   
select 
 round(avg(e.dayCalorie*30),1) as dayMeanCalorie ,
 round(avg(e.couuntday),1) as dayMeanTime 
 from
(
select  sum(count) as 'couuntday', sum(calorie*count) as 'dayCalorie',regdate 
from user_excercise_plan
where userId=#userId#
group by regdate
) e

	
    </select>
    
<!--  유저 아이디 날짜 순으로 7개 -->    
        <select id="user_excercise_plan_id_regdate_desc" resultClass="bean.User_excercise_plan" parameterClass="java.lang.String">
   
		
				 select	
		             *
		        from
		            user_excercise_plan
		       where
		            userId = #userId#
		           order by Regdate asc 
			
    </select>
    
   <!--  유저 아이디 -운동 목록별 총 카운트 ,카테고리   하지만 테스--> 
<select id="user_excercise_plan_id_exercise_cate_menu" parameterClass="java.lang.String" resultClass="hash" >
<![CDATA[ 
select  sum(count) as cate_count,exercise_cate_menu   
from user_excercise_plan
where now()< regdate < (SELECT DATE_ADD(now(), INTERVAL 7 DAY))
and userId=#userId#
group by exercise_cate_menu

]]>

</select>


<!--  유저 아이디 별로  , 날짜를 그룹으로  sum(count),날짜 구해내기 -->

<select id="user_excercise_plan_id_regdate" parameterClass="hash" resultClass="hash" >
<![CDATA[ 
select  sum(count) as cte,regdate   
from user_excercise_plan
where userId=#userId# and regdate=#regdate#
group by regdate

]]>

</select>

<!--  유저가 운동한  카테고리 -> 등급,결과코멘트 날리기 -->

<!--  날짜는 현재부터 ~ +1주일 , 카운트,카테고리 들고와서 해당 카테고리 진단과 등급을 들고옴 -->
<select id="user_excercise_plan_id_exercise_cate_menu_grade_comment" parameterClass="java.lang.String" resultClass="hash" >
<![CDATA[ 
select cate,grade,comment,cate_count,exercise_cate_menu from
(select cate,grade,comment from exercise_grade_comment2) a,

(select  sum(count) as cate_count,exercise_cate_menu   
from user_excercise_plan
where now()< regdate < (SELECT DATE_ADD(now(), INTERVAL 7 DAY))
and userId=#userId#
group by exercise_cate_menu
) b
where  exercise_cate_menu LIKE CONCAT('%', cate ,'%')

]]>

</select>


<!-- 평균 칼로리 , 평군 운동시간 -->


<select id="user_excercise_plan_id_avgcal_avgcount" parameterClass="java.lang.String" resultClass="hash" >
<![CDATA[ 

select  avg(calorie*30) as avgcal ,avg(count) as avgcnt
from user_excercise_plan
where userId=#userId#

]]>

</select>



<!--  하루 동안한 총 운동시간, 그안에 운동 리스트들 , -->
<select id="user_excercise_plan_id_exercise_name_count_cte_reg" parameterClass="java.lang.String" resultClass="hash">
<![CDATA[

select b.excercise_name as ex_name ,b.count as ex_count ,a.cte as ex_cte,b.regdate as ex_reg
from user_excercise_plan b inner join (select  sum(count) as cte,regdate   
from user_excercise_plan
where userId=#userId#
group by regdate) a
where b.regdate=a.regdate
and now()< b.regdate and b.regdate < (SELECT DATE_ADD(now(), INTERVAL 7 DAY))
order by b.regdate asc
]]>

</select>




<select id="user_excercise_plan_allcount_regdate" parameterClass="java.lang.String" resultClass="hash">
<![CDATA[
select sum(count) as count ,regdate from user_excercise_plan
where userId=#userId#
group by regdate
]]>
</select>



</sqlMap>